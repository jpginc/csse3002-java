package data;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class MovementData {
	private String id;
	private List<SensorReading> sensorData;
	private int prevIndex;
	private int nextIndex;


	MovementListener listener;
	List<Integer> zeroValues;

	/** Constructor with file generated by hardware **/
	public MovementData(File crinkleViewerFile) {
		sensorData = new ArrayList<SensorReading>();		
		buildMovementData(crinkleViewerFile);
		this.nextIndex = 0;
		this.prevIndex = -1;
	}

	/**
	 * create an empty movement data object for real time viewing
	 */
	public MovementData() {
		sensorData = new ArrayList<SensorReading>();		
		this.nextIndex = 0;
		this.prevIndex = -1;
	}
	
	/**
	 * recieve a single line from the crinnkle device and notify any
	 * listeneres that new readings have arrived
	 * @param reading
	 */
	public void recieve(String reading) {
		if(zeroValues == null) {
			setZeroValues(reading);
			return;
		}
		SensorReading s = extractReading(reading);
		if(s != null) {
			sensorData.add(s);
			notifyListeners(s);
		}
	}
	
	/**
	 * takes a string and returns a sensor reading (if the string is valid)
	 * @param line
	 * 	the string to parse
	 * @return
	 *  null if line was not a valid sensor reading otherwise returns a SensorReading
	 */
	private SensorReading extractReading(String line) {
        List<Integer> tempArray = new ArrayList<Integer>();
        String[] sr = line.split(",");
        for(int i=0; i<sr.length; i++) {
        	int num = Integer.MIN_VALUE;
            try {
            	num = Integer.parseInt(sr[i]);
            } catch(NumberFormatException nfe) {
            	// if num is not integer, skip the current line
            	return null;
            }
            tempArray.add(num);
        }			
        if(tempArray.size() == sr.length) {
        	return new SensorReading(tempArray, zeroValues);
        }
        return null;
    }

	/** Read data from sample file generated by hardware **/
	private void buildMovementData(File crinkleViewerFile) {
		// read from a file
		Scanner sc;
		try {
			sc = new Scanner(crinkleViewerFile);
			while (sc.hasNextLine()) {
				recieve(sc.nextLine());
			}
			sc.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} 
	}


	/** Check if every element in sensorData is a valid SensorReading **/
	public boolean validate() {
		for(int i=0; i<sensorData.size(); i++) {
			if(!sensorData.get(i).isValid()) {
				return false;
			}
		}
		return true;
	}
	
	/** Returns true if there is a next SensorReading in the data set.
	 * @return true if and only if the data set has next SensorReading, otherwise false. */
	public boolean hasNext() {
		if(nextIndex < numOfSensorReading()) {
			return true;
		} else {
			return false;
		}
	}

	/** Returns true if there is a previous SensorReading in the data set.
	 * @return true if and only if the data set has previous SensorReading, otherwise false. */
	public boolean hasPrevious() {
		if(prevIndex > -1) {
			return true;
		} else {
			return false;
		}
	}
	
	/** Gets next SensorReading 
	 * @return next SensorReading if available, otherwise null*/
	public SensorReading getNext() {
		if(nextIndex < numOfSensorReading()) {
			SensorReading next = sensorData.get(nextIndex);
			prevIndex = nextIndex;
			nextIndex++;
			return next;
		} else {
			return null;
		}
	}

	/** Get previous SensorReading
	 * @return previous SensorReading if available, otherwise null */
	public SensorReading getPrevious() {
		if(prevIndex > -1) {
			SensorReading previous = sensorData.get(prevIndex);
			nextIndex = prevIndex;
			prevIndex--;
			return previous;
		} else {
			return null;
		}
	}

	public List<SensorReading> getSensorData() {
		return sensorData;
	}

	public void setSensorData(List<SensorReading> sensorData) {
		this.sensorData = sensorData;
	}

	private int numOfSensorReading() {
		return sensorData.size();		
	}
	
	public int size() {
		return sensorData.size();
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}
	
	private void setZeroValues(String values) {
		zeroValues = new ArrayList<Integer>();        
		String[] sr = values.split(",");
        for(int i=0; i<sr.length; i++) {
            int num = Integer.MIN_VALUE;
            try {
                num = Integer.parseInt(sr[i]);
            } catch(NumberFormatException nfe) {
                // if num is not integer, skip the current line
                break;
            }
            zeroValues.add(num);
        }			
	}
	
	public void addListener(MovementListener m) {
		listener = m;
	}
	
	/**
	 * notify the listeners of new data
	 */
	private void notifyListeners(SensorReading s) {
		if(listener != null) {
			listener.movementNotify(s);
		}
	}
}
