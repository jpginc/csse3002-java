package crinkle;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileView;

import org.zu.ardulink.Link;
import org.zu.ardulink.RawDataListener;

import data.MovementData;

/**
 *
 * @author ToanHo
 */
public class LaunchMode extends javax.swing.JFrame {

	//private javax.swing.JButton btnSync;
	private javax.swing.JButton btnOpen;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JLabel lblRecentFile;
	private javax.swing.JLabel lblStatus;
	private javax.swing.JTextField txfRecentFile;
	private javax.swing.JLabel pnlTop; // contain btnConnect
	private javax.swing.JLabel pnlBottom; // contain lblRecentFile, txfRecentFile, btnOpen
	private javax.swing.JButton btnConnect;
	private VisualizingFrame currentFrame;

	/**
	 * Creates new form LaunchMode
	 */
	public LaunchMode() {
		initComponents();
	}


	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		try {
			javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception ex) {
			ex.printStackTrace();;
		}

		//btnSync = new javax.swing.JButton();
		jSeparator1 = new javax.swing.JSeparator();
		txfRecentFile = new javax.swing.JTextField();
		btnOpen = new javax.swing.JButton();
		lblRecentFile = new javax.swing.JLabel();
		lblStatus = new javax.swing.JLabel();
		pnlTop = new JLabel();
		pnlBottom = new JLabel();
		btnConnect = new javax.swing.JButton();
/*		btnReceive = new javax.swing.JButton();
		btnStop = new javax.swing.JButton();
		btnConnect = new javax.swing.JButton();*/


		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Crinkle Viewer");
		setResizable(false);

		btnConnect.setFont(new java.awt.Font("Tahoma", 1, 14));
		btnConnect.setText("Connect");
		btnConnect.setPreferredSize(new java.awt.Dimension(140, 40));
		btnConnect.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnConnectActionPerformed(evt);
			}
		});

		txfRecentFile.setEnabled(false);
		txfRecentFile.setPreferredSize(new java.awt.Dimension(300, 20));

		btnOpen.setText("Open");
		btnOpen.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnOpenActionPerformed(evt);
			}
		});

		lblRecentFile.setText("Recent File:");

		lblStatus.setHorizontalAlignment(SwingConstants.CENTER);
		lblStatus.setText("");
		lblStatus.setForeground(Color.BLUE);
		lblStatus.setPreferredSize(new Dimension(440, 15));

		jSeparator1.setPreferredSize(new Dimension(430, 10));

		pnlTop.setPreferredSize(new Dimension(500, 100));
		pnlBottom.setPreferredSize(new Dimension(500, 30));

		getContentPane().setLayout(new FlowLayout(FlowLayout.CENTER, 0, 5));
		getContentPane().add(pnlTop);
		pnlTop.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 15));
		pnlTop.add(btnConnect);
		pnlTop.add(lblStatus);
		getContentPane().add(jSeparator1);
		getContentPane().add(pnlBottom);
		pnlBottom.setLayout(new FlowLayout(FlowLayout.CENTER, 15, 5));
		pnlBottom.add(lblRecentFile);
		pnlBottom.add(txfRecentFile);
		pnlBottom.add(btnOpen);

		setSize(510, 200);
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

		CrinkleViewer.setAppIcon(CrinkleViewer.CRINKLE_ICON_MAC, CrinkleViewer.CRINKLE_ICON_WIN, this);

		validate();
	}

	private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {
			setFeedback("Attempting to connect crinkle...");
			this.setEnabled(false);
			final LaunchMode that = this;
            // allows the feedback message to be drawn
            SwingWorker worker = new SwingWorker<String,Void>() {
            	@Override
                protected String doInBackground() throws Exception {
                    that.setCurrentFrame(new RealTimeMode(that));
                    return null;
            	}
                    
                    @Override
                    protected void done()
                    {   
                    }
            };
            worker.execute();
	}

	private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {
		System.err.println("<<<Browse sample file: [Your Workspace]/csse3002-java/src/sampleData/sample.crvf>>>");
		String recentDir = getRecentDir(txfRecentFile.getText());
		File selectedFile = chooseFile(recentDir);
		if(selectedFile != null) {
			this.setEnabled(false);
			lblStatus.setText("");
			txfRecentFile.setText(selectedFile.getAbsolutePath());
			this.setCurrentFrame(new PlaybackMode(this, selectedFile));
			this.setVisible(false);
			this.getCurrentFrame().setVisible(true);
		} 
	}

	/** Show file chooser dialog with crinkle viewer files displayed.
	 * @return file selected or null if user click cancel */
	private File chooseFile(String recentDir) {
		JFileChooser fc = new JFileChooser();
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setAcceptAllFileFilterUsed(false);
		fc.setCurrentDirectory(new File(recentDir));
		fc.addChoosableFileFilter(new FileFilter() {

			@Override
			public String getDescription() {
				String decription = "CrinkleViewer Files (." + CrinkleViewer.FILE_EXTENSION + ")";
				return decription;
			}

			@Override
			public boolean accept(File f) {
				if(f.isDirectory()) {
					return true;
				}
				String extension = getFileExtension(f);
				if(extension == null) {
					return false;
				} else {
					if(extension.equals(CrinkleViewer.FILE_EXTENSION)) {
						return true;
					} else {
						return false;
					}
				}
			}
		});
		fc.setFileView(new FileView() {
			ImageIcon crinkleIcon = new ImageIcon(getClass().getResource(CrinkleViewer.CRINKLE_FILE_ICON));

			public String getTypeDescription(File f) {
				String extension = getFileExtension(f);
				String type = null;
				if (extension != null) {
					if (extension.equals(CrinkleViewer.FILE_EXTENSION)) {
						type = "CrinkleViewer File";
					} 
				}
				return type;
			}	

			public Icon getIcon(File f) {
				String extension = getFileExtension(f);
				Icon icon = null;
				if (extension != null) {
					if (extension.equals(CrinkleViewer.FILE_EXTENSION)) {
						icon = crinkleIcon;
					}
				}
				return icon;
			}
		});
		int returnVal = fc.showOpenDialog(this);
		if(returnVal == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			if(file.exists()) {
				return file;
			} else {
				lblStatus.setText("Error: Selected file does not exist!");
				lblStatus.setForeground(Color.RED);
				return null;
			}
		} else {
			lblStatus.setText("");
			return null;
		}
	}
	
	public void setFeedback(String s) {
		lblStatus.setText(s);
		lblStatus.updateUI();
	}

	/** Get the file extension
	 * @return file extension (lower case), otherwise null */
	private String getFileExtension(File f) {
		String extension = null;
		if(f != null) {
			String fileName = f.getName();
			int i = fileName.lastIndexOf(".");
			if(i > 0 && i < fileName.length() - 1) {
				extension = fileName.substring(i + 1).toLowerCase();
			}
		}
		return extension;
	}

	/** Get absolute path of the recent directory 
	 * @return absolute path of the recent directory, otherwise empty string */
	private String getRecentDir(String absolutePath) {
		String recentDir = "";
		File f = new File(absolutePath);
		if(f.exists()) {
			recentDir = f.getParent();
		}
		return recentDir;
	}
	
	/** Set text for txfRecentFile field */
	public void setTxfRecentFile(String string) {
		txfRecentFile.setText(string);
	}


	/**
	 * @return the currentFrame
	 */
	public VisualizingFrame getCurrentFrame() {
		return currentFrame;
	}


	/**
	 * @param currentFrame the currentFrame to set
	 */
	public void setCurrentFrame(VisualizingFrame currentFrame) {
		final LaunchMode that = this;
		this.currentFrame = currentFrame;
		currentFrame.addWindowListener(new WindowAdapter() {
          public void windowClosed(WindowEvent e) {
              that.destroyFrame();
              that.setFeedback("");
          }
        });
	}
	
	public void destroyFrame() {
		if(currentFrame != null) {
			currentFrame.destroy();
			currentFrame = null;
		}
	}

}
